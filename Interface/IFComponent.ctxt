#BlueJ class context
comment0.target=IFComponent
comment0.text=\r\n\ Die\ Klasse\ IFComponent\ ist\ die\ Superklasse\ wichtiger\ UI-Objekte\ wie\ dem\ eigens\ erstellten\ IFButton\ oder\ dem\ IFLabel.\r\n\ Sie\ erbt\ vom\ java.awt.panel\ und\ \u00FCberschreibt\ einige\ dessen\ Methoden\ wie\ public\ void\ paint(Graphics\ g)\ oder\ public\ Dimension\ getPreferredSize().\r\n\ In\ erster\ Methode\ wird\ das\ BufferedImage,\ dass\ individuell\ in\ den\ Unterklassen\ gestaltet\ wird\ gezeichnet.\r\n\ Methoden\ wie\ beforeImage()\ und\ afterImage()\ werden\ von\ den\ Unterklassen\ \u00FCberschrieben,\ um\ zum\ Beispiel\ einen\ Text\ einzuf\u00FCgen.\r\n\ Algorithmen\ wie\ public\ void\ roundedBg(double\ cr,\ Color\ clr)\ oder\ public\ void\ roundedBgWithBorder(double\ cr,\ Color\ clr,\ double\ border,\ Color\ bclr),\ auf\ die\r\n\ wir\ sehr\ stolz\ sind,\ da\ wir\ sie\ selbst\ erstellt\ haben,\ sorgen\ f\u00FCr\ eine\ angenehme\ und\ einigerma\u00DFen\ moderne\ Benutzeroberfl\u00E4che,\r\n\ die\ auch\ abgerundete\ Ecken\ enth\u00E4lt.\r\n\ \r\n\ @Jonathan\ H\u00F6lzer\ &\ Karsten\ R\u00F6mling\r\n\ @18.06.2019\r\n
comment1.params=width\ height\ xx\ yy
comment1.target=IFComponent(int,\ int,\ int,\ int)
comment1.text=\r\n\ Konstruktormethode\ der\ Klasse\ IFComponent.\ Initialisiert\ die\ Attribute\ mit\ den\ Parametern.\ Erstellt\ ein\ neues\ BufferedImage.\ Nutzt\ die\ von\ Panel\ vererbten\ Methoden,\ um\ die\ Position\ zu\ setzen\ und\ das\ Layout\ auf\ null\ zu\ setzen\ (Damit\ es\ unabh\u00E4ngig\ bearbeitet\ werden\ kann).\r\n\ \r\n\ @param\ width\ \ \ \ \ Breite\ des\ IFComponents\r\n\ @param\ height\ \ \ \ \ H\u00F6he\ des\ IFComponents\r\n\ @param\ xx\ \ \ \ \ x-Position\ des\ IFComponents\r\n\ @param\ yy\ \ \ \ \ y-Position\ des\ IFComponents\r\n
comment10.params=g2
comment10.target=void\ beforeImage(java.awt.Graphics2D)
comment10.text=\r\n\ Kann\ von\ einer\ Unterklasse\ \u00FCberschrieben\ werden.\r\n\ \r\n\ @param\ g2\ \ \ \ \ Das\ Graphics2D-Objekt,\ das\ die\ in\ dieser\ Methode\ gezeichneten\ Elemente\ zeichnet,\ wenn\ repaint()\ ausgef\u00FChrt\ wird.\r\n
comment2.params=value1\ value2\ preference
comment2.target=int\ mixOf(double,\ double,\ double)
comment2.text=\r\n\ Gibt\ eine\ Zahl\ zwischen\ den\ eingegebenen\ Werten\ value1\ und\ value2\ aus,\ wobei\ die\ Gewichtung\ des\ zweiten\ Werts\ mit\ dem\ Parameter\ preference\ bestimmt\ wird.\r\n\ \r\n\ @param\ \ value1\ \ \ \ \ der\ erste\ Wert,\ der\ f\u00FCr\ den\ Mischwert\ ben\u00F6tigt\ wird.\r\n\ @param\ \ value2\ \ \ \ \ der\ zweite\ Wert,\ der\ f\u00FCr\ den\ Mischwert\ ben\u00F6tigt\ wird.\r\n\ @param\ \ preference\ \ \ \ \ die\ Gewichtung\ des\ zweiten\ Wertes\ (eine\ Zahl\ zwischen\ 0\ und\ 1)\r\n\ @return\ \ \ \ \ \ \ \ der\ Mischwert\ zwischen\ value1\ und\ value2\ mit\ der\ Gewichtung\ preference\ als\ Integer\r\n
comment3.params=c1\ c2\ pref
comment3.target=java.awt.Color\ mixOfColors(java.awt.Color,\ java.awt.Color,\ double)
comment3.text=\r\n\ Gibt\ eine\ Farbe\ zwischen\ den\ eingegebenen\ Farben\ c1\ und\ c2\ aus,\ wobei\ die\ Gewichtung\ des\ zweiten\ Werts\ mit\ dem\ Parameter\ pref\ bestimmt\ wird.\r\n\ \r\n\ @param\ \ c1\ \ \ \ \ die\ erste\ Farbe,\ die\ f\u00FCr\ die\ Mischfarbe\ ben\u00F6tigt\ wird.\r\n\ @param\ \ c2\ \ \ \ \ die\ zweite\ Farbe,\ die\ f\u00FCr\ die\ Mischfarbe\ ben\u00F6tigt\ wird.\r\n\ @param\ \ pref\ \ \ \ \ die\ Gewichtung\ der\ zweiten\ Farbe\ (eine\ Zahl\ zwischen\ 0\ und\ 1)\r\n\ @return\ \ \ \ \ \ \ \ die\ Mischfarbe\ zwischen\ c1\ und\ c2\ mit\ der\ Gewichtung\ pref\ als\ Color-Objekt\r\n
comment4.params=cr\ clr
comment4.target=void\ roundedBg(double,\ java.awt.Color)
comment4.text=\r\n\ Zeichnet\ auf\ dem\ BufferedImage\ b\ eine\ Farbfl\u00E4che\ mit\ abgerundete\ Ecken\r\n\ \r\n\ @param\ \ cr\ \ \ \ \ der\ Faktor,\ der\ die\ St\u00E4rke\ der\ Abrundung\ bestimmt.\r\n\ @param\ \ clr\ \ \ \ \ die\ Hintergrundfarbe\ f\u00FCr\ die\ abgerundete\ Fl\u00E4che.\r\n
comment5.params=cr\ clr\ border\ bclr
comment5.target=void\ roundedBgWithBorder(double,\ java.awt.Color,\ double,\ java.awt.Color)
comment5.text=\r\n\ Zeichnet\ auf\ dem\ BufferedImage\ b\ eine\ abgerundete\ Umrandung\r\n\ \r\n\ @param\ \ cr\ \ \ \ \ der\ Faktor,\ der\ die\ St\u00E4rke\ der\ Abrundung\ bestimmt.\r\n\ @param\ \ clr\ \ \ \ \ die\ HUmrandungsfarbe\r\n\ @param\ border\ \ \ \ \ die\ Dicke\ der\ Umrandung\r\n\ @param\ bclr\ \ \ \ \ die\ Farbe\ innerhalb\ der\ Umrandung\r\n
comment6.params=
comment6.target=java.awt.Dimension\ getPreferredSize()
comment6.text=\r\n\ Wird\ von\ Panel\ geerbt\ und\ hier\ \u00FCberschrieben.\ Bestimmt\ die\ H\u00F6he\ und\ Breite\ des\ Panels.\ Sie\ wird\ hier\ auf\ die\ H\u00F6he\ und\ Breite\ des\ BufferedImage\ gesetzt.\r\n\ \r\n\ @return\ \ \ \ \ Dimension-Objekt,\ das\ die\ H\u00F6he\ und\ Breite\ des\ BufferedImage\ enth\u00E4lt.\r\n
comment7.params=g
comment7.target=void\ paint(java.awt.Graphics)
comment7.text=\r\n\ Wird\ von\ Panel\ geerbt\ und\ hier\ \u00FCberschrieben.\ Wird\ bei\ repaint()\ ausgef\u00FChrt\ und\ zeichnet\ das\ BufferedImage\ b\ sowie\ -\ je\ nach\ \u00DCberschreibung\ der\ Methoden\ public\ void\ beforeImage(Graphics2D\ g2)\ und\ public\ void\ afterImage(Graphics2D\ g2)\r\n\ in\ den\ Unterklassen\ -\ Text\ und\ weitere\ in\ den\ Unterklassen\ definierte\ Elemente.\r\n\ \r\n\ @return\ \ \ \ \ Das\ Graphics2D-Objekt,\ das\ die\ in\ dieser\ Methode\ gezeichneten\ Elemente\ zeichnet,\ wenn\ repaint()\ ausgef\u00FChrt\ wird.\r\n
comment8.params=c
comment8.target=void\ fillBI(java.awt.Color)
comment8.text=\r\n\ F\u00FCllt\ das\ BufferedImage\ b\ mit\ der\ Farbe\ c\r\n\ \r\n\ @param\ c\ \ \ \ \ Color-Objekt,\ mit\ der\ das\ BufferedImage\ gef\u00FCllt\ werden\ soll\r\n
comment9.params=g2
comment9.target=void\ afterImage(java.awt.Graphics2D)
comment9.text=\r\n\ Kann\ von\ einer\ Unterklasse\ \u00FCberschrieben\ werden.\r\n\ \r\n\ @param\ g2\ \ \ \ \ Das\ Graphics2D-Objekt,\ das\ die\ in\ dieser\ Methode\ gezeichneten\ Elemente\ zeichnet,\ wenn\ repaint()\ ausgef\u00FChrt\ wird.\r\n
numComments=11
