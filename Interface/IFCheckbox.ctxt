#BlueJ class context
comment0.target=IFCheckbox
comment0.text=\r\n\ Die\ Klasse\ IFCheckbox\ erbt\ von\ IFComponent\ und\ ist\ ein\ Element\ der\ Benutzeroberfl\u00E4che,\ das\ die\ Darstellung\ und\ Auswahl\ von\ zwei\ Zust\u00E4nden\ erlaubt\:\ Wahr\ oder\ falsch\ beziehungsweise\ true\ oder\ false.\r\n\ IFCheckbox\ kommt\ beispielsweise\ zum\ Einsatz,\ wenn\ es\ darum\ geht,\ ob\ der\ Radierer\ wei\u00DF\ oder\ in\ der\ Hintergrundfarbe\ zeichnen\ soll\ oder\ ob\ abgerundet\ oder\ eckig\ gezeichnet\ werden\ soll.\r\n\ Die\ Klasse\ IFCheckbox\ stellt\ eine\ quadratische\ Box\ mit\ einem\ H\u00E4kchen\ (wenn\ sie\ aktiviert\ ist)\ dar,\ links\ neben\ ihr\ befindet\ sich\ mit\ etwas\ Abstand\ ein\ Text,\ der\ die\ Funktion\ der\ Checkbox\ knapp\ erkl\u00E4rt.\r\n\ \r\n\ @Jonathan\ H\u00F6lzer\ &\ Karsten\ R\u00F6mling\r\n\ @18.06.2019\r\n
comment1.params=width\ height\ x\ y\ check\ txt
comment1.target=IFCheckbox(int,\ int,\ int,\ int,\ boolean,\ java.lang.String)
comment1.text=\r\n\ Konstruktormethode\ der\ Klasse\ IFCheckbox\:\ Initialisiert\ Attribute,\ setzt\ Cursor,\ ruft\ die\ Konstruktormethode\ der\ Parent\ Class\ auf,\ zeichnet\ die\ Checkbox\ und\ macht\ das\ BufferedImage\ quadratisch\ und\ l\u00E4sst\ es\ nicht\ die\ volle\ Breite\ der\ Checkbox\ haben.\r\n\ \r\n\ @param\ width\ \ \ \ \ Breite\r\n\ @param\ height\ \ \ \ \ H\u00F6he\r\n\ @param\ x\ \ \ \ \ x-Position\ im\ Frame\r\n\ @param\ y\ \ \ \ \ y-Position\ im\ Frame\r\n\ @param\ check\ \ \ \ \ Gibt\ an,\ ob\ die\ Checkbox\ zu\ Anfang\ gecheckt\ ist\r\n\ @param\ txt\ \ \ \ \ Text\ der\ Checkbox\r\n
comment10.params=
comment10.target=void\ paintST()
comment10.text=\r\n\ Malt\ eine\ quadratische,\ umrandete\ Box\ auf\ das\ BufferedImage.\ Zeichnet\ die\ Checkbox\ neu.\r\n
comment11.params=g2
comment11.target=void\ beforeImage(java.awt.Graphics2D)
comment11.text=\r\n\ \u00DCberschreibt\ die\ Methode\ public\ void\ beforeImage(Graphics2D\ g2)\ der\ Klasse\ IFComponent,\ die\ mit\ repaint()\ vor\ dem\ Zeichnen\ des\ BufferdImage\ ausgef\u00FChrt\ wird.\ Setzt\ den\ Hintergrund\ auf\ wei\u00DF.\r\n\ \r\n\ @param\ g2\ \ \ \ \ Das\ Graphics2D-Objekt,\ das\ die\ in\ dieser\ Methode\ gezeichneten\ Elemente\ zeichnet,\ wenn\ repaint()\ ausgef\u00FChrt\ wird.\r\n
comment12.params=result\ changePE
comment12.target=void\ animCR(double,\ double)
comment12.text=\r\n\ Animiert\ die\ abgerundeten\ Ecken\ der\ Checkbox.\r\n\ \r\n\ @param\ result\ \ \ \ \ Der\ Wert,\ bei\ dem\ die\ Animation\ abgeschlossen\ ist.\r\n\ @param\ changePE\ \ \ \ \ Der\ Wert,\ um\ den\ bei\ jeder\ Ausf\u00FChrung\ (alle\ 10\ Milisekunden)\ die\ abgerundeten\ Ecken\ ge\u00E4ndert\ werden.\r\n
comment13.params=
comment13.target=void\ run()
comment14.params=g2
comment14.target=void\ afterImage(java.awt.Graphics2D)
comment14.text=\r\n\ \u00DCberschreibt\ die\ Methode\ public\ void\ afterImage(Graphics2D\ g2)\ der\ Klasse\ IFComponent,\ die\ mit\ repaint()\ nach\ dem\ Zeichnen\ des\ BufferdImage\ ausgef\u00FChrt\ wird.\ Zeichnet\ ggf.\ das\ H\u00E4kchen\ und\ den\ Begleittext.\r\n\ \r\n\ @param\ g2\ \ \ \ \ Das\ Graphics2D-Objekt,\ das\ die\ in\ dieser\ Methode\ gezeichneten\ Elemente\ zeichnet,\ wenn\ repaint()\ ausgef\u00FChrt\ wird.\r\n
comment2.params=
comment2.target=void\ handleClick()
comment2.text=\r\n\ Wird\ ausgef\u00FChrt,\ um\ zu\ definieren,\ was\ passieren\ soll,\ wenn\ die\ IFCheckbox\ angeklickt\ wird\:\ der\ Wert\ von\ checked\ soll\ sich\ \u00E4ndern\ und\ das\ Objekt\ wird\ neu\ gezeichnet.\r\n
comment3.params=
comment3.target=boolean\ getChecked()
comment3.text=\r\n\ Gibt\ aus,\ ob\ die\ IFCheckbox\ aktiviert\ ist\ oder\ nicht\ (ob\ sie\ "gecheckt"\ ist)\r\n\ \r\n\ @return\ \ \ \ \ boolean\ -\ Ist\ die\ Box\ gecheckt\:\ true,\ sonst\:\ false\r\n
comment4.params=check
comment4.target=void\ setChecked(boolean)
comment4.text=\r\n\ Definiert,\ ob\ die\ Checkbox\ gecheckt\ ist\ oder\ nicht.\ Zeichnet\ die\ Checkbox\ danach\ neu.\r\n\ \r\n\ @param\ check\ \ \ \ \ Der\ Wahrheitswert\ (boolean),\ der\ entscheidet,\ ob\ die\ Checkbox\ gecheckt\ ist\ oder\ nicht.\r\n
comment5.params=value
comment5.target=void\ setCornerRadius(int)
comment5.text=\r\n\ Definiert,\ wie\ stark\ die\ Ecken\ der\ Checkbox\ abgerundet\ sein\ sollen.\ Zeichnet\ die\ Checkbox\ neu.\r\n\ \r\n\ @param\ value\ \ \ \ \ Der\ Integer\ gibt\ an,\ wie\ stark\ die\ Ecken\ der\ Checkbox\ abgerundet\ sein\ sollen.\r\n
comment6.params=c
comment6.target=void\ setColor(java.awt.Color)
comment6.text=\r\n\ Definiert,\ welche\ Hintergrundfarbe\ die\ Checkbox\ haben\ soll\ (es\ handelt\ sich\ um\ die\ Farbe\ der\ Umrandung).\ Zeichnet\ die\ Checkbox\ neu.\r\n\ \r\n\ @param\ c\ \ \ \ \ Der\ Farbwert\ gibt\ an,\ welche\ Hintergrundfarbe\ die\ Checkbox\ haben\ soll\ (es\ handelt\ sich\ um\ die\ Farbe\ der\ Umrandung).\r\n
comment7.params=b
comment7.target=void\ setBorderWidth(int)
comment7.text=\r\n\ Definiert,\ wie\ dick\ die\ Umrandung\ der\ Checkbox\ sein\ soll.\ Zeichnet\ die\ Checkbox\ neu.\r\n\ \r\n\ @param\ b\ \ \ \ \ Der\ Integer\ gibt\ an,\ wie\ dick\ die\ Umrandung\ der\ Checkbox\ sein\ soll.\r\n
comment8.params=txt
comment8.target=void\ setText(java.lang.String)
comment8.text=\r\n\ Definiert,\ welchen\ Begleittext\ die\ Checkbox\ haben\ soll.\ Zeichnet\ die\ Checkbox\ neu.\r\n\ \r\n\ @param\ txt\ \ \ \ \ Der\ String\ gibt\ an,\ welchen\ Begleittext\ die\ Checkbox\ haben\ soll.\r\n
comment9.params=f
comment9.target=void\ setFont(java.awt.Font)
comment9.text=\r\n\ Definiert,\ welche\ Schriftart,\ Schriftdicke\ und\ welcher\ Schrifttyp\ (plain,\ bold\ etc.)\ der\ Begleittext\ der\ Checkbox\ haben\ soll.\ Zeichnet\ die\ Checkbox\ neu.\r\n\ \r\n\ @param\ f\ \ \ \ \ Das\ Font-Objekt\ gibt\ an,\ welche\ Schriftart,\ Schriftdicke\ und\ welcher\ Schrifttyp\ (plain,\ bold\ etc.)\ der\ Begleittext\ der\ Checkbox\ haben\ soll.\r\n
numComments=15
