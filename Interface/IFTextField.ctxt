#BlueJ class context
comment0.target=IFTextField
comment0.text=\r\n\ Die\ Klasse\ IFTextField\ h\u00E4tte\ besser\ IFInputField\ hei\u00DFen\ soll,\ denn\ anders\ als\ das\ TextField\ von\ Java\ AWT\ verf\u00FCgt\ sie\ auch\ \u00FCber\ den\ Typ\ "Nummer",\ der\ mit\ besonderen\ Features\ ausgestattet\ ist.\r\n\ So\ kann\ man\ besipielsweise\ mit\ der\ Methode\ public\ int\ getNumber()\ auch\ die\ eingegebene\ Zahl\ bekommen,\ wenn\ der\ Typ\ auf\ "Nummer"\ ist\ und\ wenn\ man\ auf\ "+"\ oder\ "-"\ auf\ der\ Tastatur\ dr\u00FCckt,\ wird\ die\ im\r\n\ TextField\ enthaltene\ Zahl\ um\ eins\ erh\u00F6ht\ oder\ verringert.\r\n\ Zus\u00E4tzlich\ kann\ man\ Texte\ aus\ der\ Zwischenablage\ einf\u00FCgen,\ indem\ man\ Strg+C\ dr\u00FCckt.\r\n\ IFTextField\ erbt\ von\ der\ Klasse\ IFComponent\ und\ soll\ die\ Funktionen\ eines\ richtigen\ TextFields\ enthalten,\ bis\ dahin\ ist\ aber\ noch\ ein\ kleiner\ Weg,\ den\ wir\ zeitlich\ wohl\ nicht\ mehr\ beschreiten\ k\u00F6nnen\ werden.\r\n\ Beispielsweise\ kann\ man\ noch\ nicht\ in\ der\ Mitte\ des\ TextFields\ Texte\ einf\u00FCgen,\ sondern\ muss\ immer\ am\ Ende\ schreiben.\r\n\ \r\n\ @Jonathan\ H\u00F6lzer\ &\ Karsten\ R\u00F6mling\r\n\ @18.06.2019\r\n
comment1.params=width\ height\ x\ y\ typeP
comment1.target=IFTextField(int,\ int,\ int,\ int,\ int)
comment1.text=\r\n\ Konstruktormethode\ der\ Klasse\ IFTextField\:\ Initialisiert\ Attribute,\ f\u00FCgt\ KeyListener\ und\ FocusListener\ hinzu,\ startet\ die\ Animation\ der\ Linie,\ die\ anzeigt,\ wo\ der\ text\ gerade\ bearbeitet\ wird...\r\n\ \r\n\ @param\ width\ \ \ \ \ Breite\r\n\ @param\ height\ \ \ \ \ H\u00F6he\r\n\ @param\ x\ \ \ \ \ x-Position\ im\ Frame\r\n\ @param\ y\ \ \ \ \ y-Position\ im\ Frame\r\n\ @param\ typeP\ \ \ \ \ Typ\ des\ TextFields\:\ Numerisch\ oder\ Text?\ -\ L\u00E4sst\ sich\ \u00FCber\ die\ statischen\ Attribute\ T_TEXT\ und\ T_NUMBER\ zuordnen.\r\n
comment10.params=color
comment10.target=void\ setStandardColor(java.awt.Color)
comment10.text=\r\n\ Definiert,\ welche\ Hintergrundfarbe\ das\ TextField\ standardm\u00E4\u00DFig\ haben\ soll\ (es\ handelt\ sich\ um\ die\ Farbe\ der\ Umrandung).\ Zeichnet\ das\ TextField\ neu.\r\n\ \r\n\ @param\ color\ \ \ \ \ Der\ Farbwert\ gibt\ an,\ welche\ Hintergrundfarbe\ das\ TextField\ standardm\u00E4\u00DFig\ haben\ soll\ (es\ handelt\ sich\ um\ die\ Farbe\ der\ Umrandung).\r\n
comment11.params=color
comment11.target=void\ setFocusColor(java.awt.Color)
comment11.text=\r\n\ Definiert,\ welche\ Hintergrundfarbe\ das\ TextField\ haben\ soll\ (es\ handelt\ sich\ um\ die\ Farbe\ der\ Umrandung),\ wenn\ das\ TextField\ ausgew\u00E4hlt\ (fokussiert)\ ist.\ Zeichnet\ das\ TextField\ neu.\r\n\ \r\n\ @param\ color\ \ \ \ \ Der\ Farbwert\ gibt\ an,\ welche\ Hintergrundfarbe\ das\ TextField\ haben\ soll\ (es\ handelt\ sich\ um\ die\ Farbe\ der\ Umrandung),\ wenn\ das\ TextField\ ausgew\u00E4hlt\ (fokussiert)\ ist.\r\n
comment12.params=fgClr
comment12.target=void\ setForegroundColor(java.awt.Color)
comment12.text=\r\n\ Definiert,\ welche\ Schriftfarbe\ das\ TextField\ haben\ soll.\ Zeichnet\ das\ TextField\ neu.\r\n\ \r\n\ @param\ fgClr\ \ \ \ \ Der\ Farbwert\ gibt\ an,\ welche\ Schriftfarbe\ das\ TextField\ haben\ soll.\r\n
comment13.params=ncr
comment13.target=void\ setCornerRadius(double)
comment13.text=\r\n\ Definiert,\ wie\ stark\ die\ Ecken\ des\ TextFields\ abgerundet\ sein\ sollen.\ Zeichnet\ das\ TextField\ neu.\r\n\ \r\n\ @param\ ncr\ \ \ \ \ Der\ Integer\ gibt\ an,\ wie\ stark\ die\ Ecken\ des\ TextFields\ abgerundet\ sein\ sollen.\r\n
comment14.params=nb
comment14.target=void\ setBorder(double)
comment14.text=\r\n\ Definiert,\ wie\ dick\ die\ Umrandung\ des\ TextFields\ sein\ soll.\ Zeichnet\ das\ TextField\ neu.\r\n\ \r\n\ @param\ nb\ \ \ \ \ Der\ Integer\ gibt\ an,\ wie\ dick\ die\ Umrandung\ des\ TextFields\ sein\ soll\ (in\ Pixeln).\r\n
comment15.params=txt
comment15.target=void\ setText(java.lang.String)
comment15.text=\r\n\ Definiert,\ welchen\ Text\ das\ TextField\ haben\ soll.\ Zeichnet\ den\ Button\ neu.\r\n\ \r\n\ @param\ txt\ \ \ \ \ Der\ String\ gibt\ an,\ welchen\ Text\ das\ TextField\ haben\ soll.\r\n
comment16.params=fnt
comment16.target=void\ setFont(java.awt.Font)
comment16.text=\r\n\ Definiert,\ welche\ Schriftart,\ Schriftdicke\ und\ welcher\ Schrifttyp\ (plain,\ bold\ etc.)\ der\ Text\ des\ TextFields\ haben\ soll.\ Zeichnet\ das\ TextField\ neu.\r\n\ \r\n\ @param\ fnt\ \ \ \ \ Das\ Font-Objekt\ gibt\ an,\ welche\ Schriftart,\ Schriftdicke\ und\ welcher\ Schrifttyp\ (plain,\ bold\ etc.)\ der\ Text\ des\ TextFields\ haben\ soll.\r\n
comment17.params=pt
comment17.target=void\ setPositionType(int)
comment17.text=\r\n\ Definiert,\ wie\ der\ Text\ innerhalb\ des\ TextFields\ positioniert\ werden\ soll.\ M\u00F6gliche\ Parameter\ sind\ als\ statische\ Attribute\ der\ Klasse\ verf\u00FCgbar,\ beispielsweise\ IFTextField.P_CENTER.\ Zeichnet\ das\ TextField\ neu.\r\n\ \r\n\ @param\ pt\ \ \ \ \ Der\ Integer\ gibt\ an,\ wie\ der\ Text\ innerhalb\ des\ TextFields\ positioniert\ werden\ soll.\ M\u00F6gliche\ Parameter\ sind\ als\ statische\ Attribute\ der\ Klasse\ verf\u00FCgbar,\ beispielsweise\ IFTextField.P_CENTER.\r\n
comment18.params=
comment18.target=java.lang.String\ getText()
comment18.text=\r\n\ Gibt\ den\ Text\ des\ TextFields\ als\ String\ aus.\r\n\ \r\n\ @return\ \ \ \ \ Der\ Text\ des\ TextFields\ als\ String.\r\n
comment19.params=
comment19.target=int\ getNumber()
comment19.text=\r\n\ Gibt\ die\ Zahl\ des\ TextFields\ als\ Integer\ aus.\r\n\ \r\n\ @return\ \ \ \ \ Die\ Zahl\ des\ TextFields\ als\ Integer.\ Ist\ das\ TextField\ leer\ oder\ nicht\ auf\ numerisch\ gestellt,\ wird\ 0\ ausgegeben.\r\n
comment2.params=k
comment2.target=void\ keyReleased(java.awt.event.KeyEvent)
comment20.params=g2
comment20.target=void\ afterImage(java.awt.Graphics2D)
comment20.text=\r\n\ \u00DCberschreibt\ die\ Methode\ public\ void\ afterImage(Graphics2D\ g2)\ der\ Klasse\ IFComponent,\ die\ mit\ repaint()\ nach\ dem\ Zeichnen\ des\ BufferdImage\ ausgef\u00FChrt\ wird.\ Zeichnet\ den\ Text\ gem\u00E4\u00DF\ den\ Attributen.\ Zeichnet\ ggf.\ einen\ Cursor,\ der\ die\ aktuelle\r\n\ Position\ beim\ Bearbeiten\ des\ Texts\ darstellt.\r\n\ \r\n\ @param\ g2\ \ \ \ \ Das\ Graphics2D-Objekt,\ das\ die\ in\ dieser\ Methode\ gezeichneten\ Elemente\ zeichnet,\ wenn\ repaint()\ ausgef\u00FChrt\ wird.\r\n
comment21.params=
comment21.target=void\ beforeImage()
comment21.text=\r\n\ \u00DCberschreibt\ die\ Methode\ public\ void\ beforeImage(Graphics2D\ g2)\ der\ Klasse\ IFComponent,\ die\ mit\ repaint()\ vor\ dem\ Zeichnen\ des\ BufferdImage\ ausgef\u00FChrt\ wird.\r\n\ \r\n\ @param\ g2\ \ \ \ \ Das\ Graphics2D-Objekt,\ das\ die\ in\ dieser\ Methode\ gezeichneten\ Elemente\ zeichnet\ (Ok,\ hier\ wird\ nichts\ gezeichnet...),\ wenn\ repaint()\ ausgef\u00FChrt\ wird.\r\n
comment3.params=k
comment3.target=void\ keyPressed(java.awt.event.KeyEvent)
comment4.params=k
comment4.target=void\ keyTyped(java.awt.event.KeyEvent)
comment5.params=f
comment5.target=void\ focusLost(java.awt.event.FocusEvent)
comment6.params=f
comment6.target=void\ focusGained(java.awt.event.FocusEvent)
comment7.params=
comment7.target=void\ run()
comment8.params=
comment8.target=void\ paintST()
comment8.text=\r\n\ Malt\ die\ Umrandung\ des\ TextFields\ in\ der\ Umrandungsfarbe.\ Zeichnet\ das\ TextField\ neu.\r\n
comment9.params=color
comment9.target=void\ setColor(java.awt.Color)
comment9.text=\r\n\ Definiert,\ welche\ Hintergrundfarbe\ das\ TextField\ haben\ soll\ (es\ handelt\ sich\ um\ die\ Farbe\ der\ Umrandung).\ Zeichnet\ das\ TextField\ neu.\r\n\ \r\n\ @param\ color\ \ \ \ \ Der\ Farbwert\ gibt\ an,\ welche\ Hintergrundfarbe\ das\ TextField\ haben\ soll\ (es\ handelt\ sich\ um\ die\ Farbe\ der\ Umrandung).\r\n
numComments=22
